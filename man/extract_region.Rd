% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tzara.R
\name{extract_region}
\alias{extract_region}
\alias{extract_region.character}
\alias{extract_region.XStringSet}
\alias{extract_region.ShortRead}
\alias{extract_region.list}
\title{Extract regions from a set of sequences (maybe with qualities)}
\usage{
extract_region(
  seq,
  positions,
  region,
  region2 = region,
  outfile = NULL,
  append = FALSE,
  format,
  compress = NULL,
  ...
)

\method{extract_region}{character}(
  seq,
  positions,
  region,
  region2 = region,
  outfile = NULL,
  qualityType = "FastqQuality",
  append = FALSE,
  format = NULL,
  compress = NULL,
  ...
)

\method{extract_region}{XStringSet}(
  seq,
  positions,
  region,
  region2 = region,
  outfile = NULL,
  append = FALSE,
  format = NULL,
  compress = NULL,
  ...
)

\method{extract_region}{ShortRead}(
  seq,
  positions,
  region,
  region2 = region,
  outfile = NULL,
  append = FALSE,
  format = NULL,
  compress = NULL,
  ...
)

\method{extract_region}{list}(seq, positions, region, region2 = region, outfile = NULL, ...)
}
\arguments{
\item{seq}{(\code{character} scalar (a file name), an object belonging to
several classes representing nucleotide sequences, a \code{character}
vector of nucleotide sequences, or a \code{list} of any of these) the
sequences to extract regions from. To extract from several files, use
a \code{list} of single filenames, instead of a vector of filenames.}

\item{positions}{(\code{data.frame}) as returned by \code{\link[rITSx]{itsx}}
with \code{positions = TRUE} and \code{read_function} set; should have
columns \code{$seq_id} with sequence IDs (matching those in \code{seq}),
\code{$region} giving the name of each region, and \code{$start} and
\code{$end} giving the start and stop location, if found, of each
region.}

\item{region}{(\code{character}) The region to extract. Should match a value
given in \code{positions$region}.}

\item{region2}{(\code{character}) If different from \code{region}, then the
entire segment beginning at the start of \code{region} and ending at
the end of \code{region2} will be extracted.  For instance, to extract
the entire ITS region, use \code{region = 'ITS1', region2 = 'ITS2'}.}

\item{outfile}{(\code{character}) If given, the output will be written to the
filename given in fasta or fastq format.  The format is determined by
\code{seq}, not by the extension of \code{outfile}.}

\item{append}{(\code{logical} scalar) if \code{TRUE}, then data is appended
to \code{outfile}; if \code{FALSE}, existing data in \code{outfile} is
overwritten.}

\item{format}{(\code{character}) File format to write (if \code{outfile} is
given). Default is to guess based on ".fasta[.gz]" or ".fastq[.gz]"
extension.}

\item{compress}{(\code{logical} scalar or NULL) Whether to gz-compress
\code{outfile}. Default is to detect based on presence of ".gz"
extension.}

\item{...}{Passed to methods.}

\item{qualityType}{(\code{character} scalar) fastq file quality encoding; see
\code{\link[ShortRead]{readFastq}}.}
}
\value{
(\code{object} of the same class as \code{seq}, or if \code{seq}
    is a filename, \code{\link[Biostrings]{XStringSet-class}} or
    \code{\link[Biostrings]{QualityScaledXStringSet-class}} depending on the
    format of the file) The requested region from each of the input
    sequences where it was found.
}
\description{
Extract regions from a set of sequences (maybe with qualities)
}
